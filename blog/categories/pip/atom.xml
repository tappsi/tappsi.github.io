<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pip | Tappsi's Engineering and Technology Blog]]></title>
  <link href="http://tappsi.github.io/blog/categories/pip/atom.xml" rel="self"/>
  <link href="http://tappsi.github.io/"/>
  <updated>2017-02-20T08:00:33-05:00</updated>
  <id>http://tappsi.github.io/</id>
  <author>
    <name><![CDATA[Tappsi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cómo Hacer Un Repositorio De Python Instalable]]></title>
    <link href="http://tappsi.github.io/blog/2016/12/19/como-hacer-un-repositorio-de-python-instalable/"/>
    <updated>2016-12-19T16:11:27-05:00</updated>
    <id>http://tappsi.github.io/blog/2016/12/19/como-hacer-un-repositorio-de-python-instalable</id>
    <content type="html"><![CDATA[<p>A veces, cuando trabajamos con Python y tenemos varios repositorios privados, surge la necesidad de compartir código entre ellos. En ésta entrada vamos a ver cómo hacer un repositorio privado de Python y poder instalarlo usando el sistema de gestión de paquetes <code>pip</code>.</p>

<p>Primero creamos un repositorio en GitHub con el código de Python que queremos usar en proyectos diferentes. Decimos que nuestro repositorio tenga el url</p>

<!--more-->


<pre><code>https://github.com/tappsi/python_repo
</code></pre>

<p>y los siguientes archivos:</p>

<pre><code>|-- tappsi_constants
|   `-- __init__.py
|-- .gitignore
|-- README.md
`-- setup.py
</code></pre>

<p>En el módulo <code>tappsi_constants</code> vamos a colocar nuestro código, y <code>setup.py</code> va a tener la siguiente estructura:</p>

<pre><code class="python">from setuptools import setup

setup(
    name='python_repo',
    version='0.1',
    author='J. Random Hacker',
    author_email='info@example.co',
    packages=['tappsi_constants'],
    description='Constants used across python projects.',
    long_description=open('README.md').read(),
    install_requires=[
        "six &gt;= 1.10.0",
    ],
)
</code></pre>

<p>Haremos un commit de nuestro repositorio y crearemos una etiqueta que corresponde a la versión del paquete:</p>

<pre><code class="bash">git commit -m "First commit"
git tag v0.1
git push --tags
</code></pre>

<p>Ahora podemos usar el repositorio como un paquete de python, colocando la siguiente linea en <code>requirements.txt</code> de otros proyectos</p>

<pre><code>pip install git+ssh://git@github.com/tappsi/python_repo.git@v0.1
</code></pre>
]]></content>
  </entry>
  
</feed>
